---
title: "Data Exercise: What is the interest rate?"
author: "Manolis Chatzikonstantinou"
date: "29/7/2022"
format: pdf
---

# Interest rates

We care about interest rates because it helps economists understand how to compare prices of substitute goods and assets over time. In addition, the level of interest rates is the main policy instrument of the Central Bank, the central tool of monetary policy. The Federal Open Market Committee (FOMC) sets a target on the rate of federal funds, influencing all the rates of returns of interest-bearing assets in the economy. In this exercise, we check the behavior of the interest rate using data from online sources.

## Getting the data

We will download several series of data related to interest rates. For that reason, here, I re-introduce apackage  that makes easier the use of data provided by the Research division of the Federal Reserve Bank of St. Louis. The database has more than 500,000 economic time series from 87 sources, covering  inflation and employment measures, exchange rates, interest rates, monetary aggregates, U.S. trade, production and financial data.  The use of those data with R is made simpler with the fredr package. This package provides a complete set of R function to the [Federal Reserve Economic Data (FRED)](https://fred.stlouisfed.org/) RESTful API. For that reason you should set up an account in the website above and then get an API to use in your applications. 

After you do so install the package `install.packages('fredr')` and start working with the data. As an example, let's find data about unemployment in the US. To do so, we will need to know the series ID in the data, however the package provides some functionality in case you do not know the key and you do not want to search directly in the website. The following code finds the most related series ID in the FRED data related to the term "unemployment" and plots the time series. Also, make sure to read the documentation `help("fredr")`.


```{r warning=FALSE}
library(fredr)
fredr_set_key(Sys.getenv("FRED_API_KEY"))
```

For convenvience I also define two functions that download data from a specific starting date, at a monthly frequence, one getting the data in levels ("lin") and the other in percent changes ("pc1").
```{r}
# Create a function to print squares of numbers in sequence.
fredr_levels_monthly <- function(name,ddate) {
fredr::fredr_series_observations(
  series_id = name,
  observation_start = as.Date(ddate),
  frequency = "m",
  units = "lin"
)
}

fredr_pcyearly_monthly <- function(name,ddate) {
fredr::fredr_series_observations(
  series_id = name,
  observation_start = as.Date(ddate),
  frequency = "m",
  units = "pc1"
)
}
```

## Fed Funds rate in the 21st century

This graph shows the federal funds rate for approximately the past 20 years, from 2000 to 2021. From the FRED website I know that the series FEDFUNDS represents the way data are stored in the online database of the Fed. I store the data in the dataFF object in R and then I use it along with the package ggplot to plot the data. In particular, I specify in ggplot that I want to plot data from the dataFF, in particular in the x-axis the date variable containing information on the date corresponding to every value of my series and then in the y-axis the corresponding value. This, economists, call it a time series plot. In addition, I also specify using the `+` required from package ggplot, that I want my data to look like a line `geom_line()`, I want the title to be "Fed Funds Rate", and the labels in the x and y axis to be "Observation Date" and "Percent" respectively.

```{r, include=TRUE}
library(ggplot2)
dataFF <-fredr(series_id = "FEDFUNDS") 
dataFF <-subset(dataFF,date >= "1999-12-01" & date <= "2023-01-01") 
ggplot(data = dataFF, mapping = aes(x = date, y = value)) +
    geom_line() + ggtitle("Fed Funds Rate") + 
    labs(x = "Observation Date", y = "Percent")

```

In the 2000s, you see the Fed following clear cycles for both tightening and loosening rates. To start the decade, the Fed slashed interest rates 13 times to a low of 1 percent, to deal with a recession generated by the drop in the stock market. Then, The U.S. central bank hiked interest rates 17 times between 2004 and 2006 to a high of 5.25 percent. That was until the financial crisis of 2008 happened and the ensuing Great Recession, The Fed then slashed interest rates by 100 basis points to near-zero. The interest rate couldn’t escape zero in the 2010s and until 2015 the policy rate was unchanged. After 2015, the Fed only hiked interest rates by 25 basis points once per year. That is, until 2017, when the Fed hiked three times, and 2018, when they hiked four more times. The fed funds rate peaked at 2.25-2.5 percent. The fed funds rate looked like it was about to settle there until the coronavirus pandemic came along, ushering back in another era of near-zero rates. The Fed slashed rates to zero in two emergency meetings within 13 days of each other as the gears of the economy came to a halt.

Observe that the same plot, would have been create faster(in lines of code):

```{r, include=TRUE}

ggplot(data = fredr_levels_monthly("FEDFUNDS","1999-12-01"),
       mapping = aes(x = date, y = value)) +
    geom_line() + ggtitle("Fed Funds Rate") + 
    labs(x = "Observation Date", y = "Percent")

```

### Fisher equation

Fisher equation is called the relationship between nominal and real interest rates, and the percentage change in the aggregate price level between two time periods, or else the inflation rate. If someone buys a 1 dollar-bond in period $t$ while the interest rate on the bond is $i_t$. In period $t+1$, the buyer will receive $1+i_t$ dollars. However, if the inflation rate from $t$ to $t+1$ is anticipated to be  $\pi_{t}$, then the present value of the proceeds from the bond is  $\frac{1+i_t}{1+\pi+{t+1}}$, which is equivalent to the return on the bond in real terms - the additional basket of goods that can be bought- at period $t+1$. This, real return on savings is termed real interest rate $r_{t}$ Hence,

\begin{equation}
1+r_{t} = \frac{1+i_t}{1+\pi_{t}}
\end{equation}

From here the nominal interest rate can be solved for.

\begin{align}
1 + i_t &= \left (1 + r_{t} \right ) \left (1 + \pi_{t} \right ) \\
        &= 1 + r_{t} + \pi_{t} + r_{t} \pi_{t}
\end{align}

Therefore,

\begin{align}
i_t &= r_{t} + \pi_{t} + r_{t} \pi_{t} \\
    &\approx r_{t} + \pi_{t}
\end{align}

The last equation follows when both the inflation rate and the nominal interest rates are small. For example, when both numbers are below 0.1 (or 10 percent), the value of $+ r_{t} \pi_{t}$ would necessarily be close to 0 (smaller than 0.01 or 1 percent).

### Calculating real rates

The following code and table shows how to use the functions we defined above to  
download the data for the yield of treasury bonds expiring in 1 year (FRED series GS1) in nominal terms, and the inflation rate based on the CPI series(FRED series CPIAUCSL) starting in 1960 and then bind the rows of the data together (rbind):


```{r}

data<-rbind(fredr_levels_monthly("GS1",ddate = "1955-01-01"),
                fredr_pcyearly_monthly("CPIAUCSL",ddate = "1955-01-01"))
# see part of the data
data 
```

Then we create the yield of treasury bonds expiring in 1 year (FRED series GS1) in real terms. Before we do that we need to express our data in a way that each row, contains one value for the yield and one value for the inflation each month, we do that by using the pivot_wider option from package. First we subset the data to select columns 1, 2 and 3  and then we pivot the data in a wide format where each row is identified by the variable date and each column is related to the old series id column.

```{r}
library(tidyr)
data<-subset(data, select = date:value)
pivot_wider(data=data,id_cols = "date", names_from =  series_id)
```
Once we have the data in that form the real rate in created by subtracting the inflation column from the yield column. We can do that using the function, mutate from package dplyr that  adds new variables to existing datasets:

```{r}
library(dplyr)
# transform the data to have a column associated with GSI and one for inflation
data<-subset(data, select = date:value) 
data<-pivot_wider(data = data,id_cols = "date", names_from =  series_id)
# then subtract the inflation rate for the specific year from the nominal interest rate
data<-mutate(data,GS1r=GS1-CPIAUCSL)
# see part of the data
data

```




### Second graph

Now  what if we want to graph three popular interest rates that have longer time series: the 1-year Treasury bond rate, Moody’s Aaa corporate bond rate, and the federal funds rate together in one graph? All those rates are nominal, so we first transform them to real by subtracting the rate of inflation. After we transform them to nominal, I plot them here. TO do that, I make use of the fact that if I have a datatable that contains my variables in a long format, that is in each row, I have information for the date, the value and the name of the variable that each value corresponds to, then I can use in my ggplot function a third option (color) that will distinguish the variables and then will plot them assigning them different colors. To do that then I bring the data from the wide form back to a long form, after I keep only the date variables and the real yields.



```{r}

data<-rbind(fredr_levels_monthly("AAA",ddate = "1955-01-01"),
                fredr_levels_monthly("GS1",ddate = "1955-01-01"),
                fredr_levels_monthly("FEDFUNDS",ddate = "1955-01-01"),
                fredr_pcyearly_monthly("CPIAUCSL",ddate = "1955-01-01"))

data<-subset(data, select = date:value) 
data<-pivot_wider(data = data,id_cols = "date", names_from =  series_id)
# then subtract the inflation rate for the specific year from the nominal interest rate
data<-mutate(data,AAAr=AAA-CPIAUCSL,GS1r=GS1-CPIAUCSL,FEDFUNDSr=FEDFUNDS-CPIAUCSL)
data<-subset(data, select = c(date,AAAr,GS1r,FEDFUNDSr)) 

data<- pivot_longer(data,-date)

ggplot(data = data, mapping = aes(x = date, y = value, color = name)) +
    geom_line() +
    labs(x = "Observation Date", y = "Rate", color = "Series")

```


### Exercise 

Use any statistical software along with data from FRED to:

  1.    Replicate the above figure, plotting the real rates of triple A corporate bonds(FRED series AAA), the yield of treasury bonds expiring in 1 year (FRED series GS1), and the Fed Funds rate(FRED series FEDFUNDS) starting in 1955.
    
  2.    Construct a figure, plotting the yield of treasury bonds expiring in 1 year (FRED series GS1) in nominal terms, and the inflation rate based on the CPI series(FRED series CPIAUCSL) starting in 1960.
  
  3.    Construct a  figure, plotting the real yield of treasury bonds expiring in 1 year (FRED series GS1), the  real yield of treasury bonds expiring in 2 year (FRED series GS2), and the  real yield of treasury bonds expiring in 10 years (FRED series GS10) starting in 1980. 
  
  4.    Based on the way, we used the data above to calculate the real rates. Would you say that this is closer to the ex ante rate or the ex post interest rate?
  
### Can I use Rstudio, to complete the exercise?

The answer is yes. Why? First all the above code should help you get the data and understand the transformations you have to do to complete the assignment and second, a few weeks ago, the Rstudio organization [introduced Quarto](https://www.rstudio.com/blog/announcing-quarto-a-new-scientific-and-technical-publishing-system/?mkt_tok=NzA5LU5YTi03MDYAAAGGVgVTLhhcLGyfiMAW06R1dFiIxZl02pAMoMmfFNcrNqOJJa9fcRPDmQ_SKaXdpQAdQBfYbTUjy-fIA_4v9PLeYXJxepXCXglnr2Le7iTfIXY), a new open-source scientific and technical publishing system. To create your own pdf file from qmd document, just follow the following steps:

1. Download and install the latest release of RStudio (v2022.07), you can skip that step if you recently did it.

2. Be sure that you have installed the tidyverse and palmerpenguins packages:

```
install.packages("tidyverse")
install.packages("palmerpenguins")
```

3. Download the Quarto document (.qmd) below, open it in RStudio, and click on  Render.

 [Download hello.qmd](https://quarto.org/docs/get-started/hello/rstudio/_hello.qmd)
 
After that you can also download the data_exercise.qmd from canvas and replicate my own pdf document.

 If you want to further your journey with Quarto, here are some specific things that are recommended by Rstudio, follow their tutorial on [Quarto](https://quarto.org/docs/get-started/hello/rstudio.html). 
 
 Then, watch the live workshop teaching on how to use Quarto available [here](https://www.youtube.com/watch?v=yvi5uXQMvu4). It takes you from the download page to doing some awesome things in just about 2 hours, starting from minute 35 of the live stream. There is a  Pre-built RStudio Cloud with workshop materials already installed here: https://rstudio.cloud/content/4332583 and an associated website here: https://jthomasmock.github.io/quarto-2hr-webinar/
